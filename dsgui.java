
import Phase1.Compressor;
import static Phase1.Compressor.compress;
import static Phase1.Compressor.expand;
import Phase1.Deformatter;
import Phase1.Format;
import Phase1.JSON_Converter;
import static Phase1.JSON_Converter.converter;
import Phase1.Post;
import Phase1.Tree;
import Phase1.TreeNode;
import Phase1.User;
import Phase1.XMLChecker;
import Phase1.Xmfile;
import Phase1.classesGenerator;
import dsgui.DsGui;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.*;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import phase2.PostSearch;
import phase2.Vizualizer;
//1,3,7

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author SHEREF ZEDAN
 */
public class dsgui extends javax.swing.JFrame {
            User[] user;
    /**
     * Creates new form dsgui
     */
    Xmfile x1;
 

    public dsgui() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jFrame3 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        scrollbar1 = new java.awt.Scrollbar();
        TOJSON = new javax.swing.JButton();
        EXPAND = new javax.swing.JButton();
        FORMAT = new javax.swing.JButton();
        OPEN = new javax.swing.JButton();
        COMPRESS = new javax.swing.JButton();
        CORRECT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        CHECK = new javax.swing.JButton();
        MINIFY = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        Analysis = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame3Layout = new javax.swing.GroupLayout(jFrame3.getContentPane());
        jFrame3.getContentPane().setLayout(jFrame3Layout);
        jFrame3Layout.setHorizontalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame3Layout.setVerticalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TOJSON.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TOJSON.setForeground(new java.awt.Color(51, 51, 255));
        TOJSON.setText("TO JSON");
        TOJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TOJSONActionPerformed(evt);
            }
        });

        EXPAND.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        EXPAND.setForeground(new java.awt.Color(51, 51, 255));
        EXPAND.setText("EXPAND");
        EXPAND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXPANDActionPerformed(evt);
            }
        });

        FORMAT.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FORMAT.setForeground(new java.awt.Color(51, 51, 255));
        FORMAT.setText("FORMAT");
        FORMAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FORMATActionPerformed(evt);
            }
        });

        OPEN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        OPEN.setForeground(new java.awt.Color(51, 51, 255));
        OPEN.setText("OPEN");
        OPEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPENActionPerformed(evt);
            }
        });

        COMPRESS.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        COMPRESS.setForeground(new java.awt.Color(51, 51, 255));
        COMPRESS.setText("COMPRESS");
        COMPRESS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                COMPRESSActionPerformed(evt);
            }
        });

        CORRECT.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CORRECT.setForeground(new java.awt.Color(51, 51, 255));
        CORRECT.setText("CORRECT");
        CORRECT.setEnabled(false);
        CORRECT.setMaximumSize(new java.awt.Dimension(119, 15));
        CORRECT.setMinimumSize(new java.awt.Dimension(119, 15));
        CORRECT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CORRECTActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setSelectedTextColor(new java.awt.Color(0, 204, 204));
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        CHECK.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CHECK.setForeground(new java.awt.Color(51, 51, 255));
        CHECK.setText("CHECK");
        CHECK.setMaximumSize(new java.awt.Dimension(123, 15));
        CHECK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CHECKActionPerformed(evt);
            }
        });

        MINIFY.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        MINIFY.setForeground(new java.awt.Color(51, 51, 255));
        MINIFY.setText("MINIFY");
        MINIFY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MINIFYActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clear.setForeground(new java.awt.Color(51, 51, 255));
        clear.setText("clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        Analysis.setBackground(new java.awt.Color(204, 204, 204));
        Analysis.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Analysis.setForeground(new java.awt.Color(51, 51, 255));
        Analysis.setText("Analysis");
        Analysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalysisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CORRECT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FORMAT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TOJSON, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CHECK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(COMPRESS, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(MINIFY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EXPAND, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OPEN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(Analysis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OPEN, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CHECK, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CORRECT, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MINIFY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(COMPRESS, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EXPAND, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FORMAT, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TOJSON, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(Analysis, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OPENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPENActionPerformed
        jTextArea3.setText(null);
        EXPAND.setEnabled(true);
        OPEN.setText("OPEN FILE");
        try {
            // TODO add your handling code here:
            x1 = new Xmfile();
            String filename = x1.opener();
            x1.reader();
            jTextArea1.setText("");
            jTextArea3.append("file: " + filename + " opened successfully!\n");
            jTextArea3.setForeground(Color.green);
            //       System.out.println(filename);
            x1.create_output_file(filename);
            File file = new File(filename);
            Scanner scan = new Scanner(file);
            // scan.nextLine();
            while (scan.hasNextLine()) {
                jTextArea1.append(scan.nextLine() + "\n");
            }
            jTextArea1.requestFocus();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(dsgui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            jTextArea1.append(e.getMessage());
        }
//open xml file


    }//GEN-LAST:event_OPENActionPerformed

    private void FORMATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FORMATActionPerformed
        jTextArea3.setText(null);
        try {
            String s = jTextArea1.getText();
            if (s == null || s.isBlank()) {
                jTextArea3.append("please insert text to format\n");
                jTextArea3.setForeground(Color.red);
                return;
            }
            String v = Format.format(s);
            // System.out.println(v);
            jTextArea3.append("formatted successfully!\n");
            jTextArea3.setForeground(Color.green);
            jTextArea1.setText(v);
        } catch (Exception e) {
            jTextArea1.append(e.getMessage());
        }
    }//GEN-LAST:event_FORMATActionPerformed

    private void COMPRESSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_COMPRESSActionPerformed
        jTextArea3.setText(null);
        String str = jTextArea1.getText();
        if (str == null || str.isBlank()) {
            jTextArea3.append("please insert text to compress\n");
            return;
        }
        JFileChooser fc = new JFileChooser();
        fc.showSaveDialog(jPanel1);
        File file = fc.getSelectedFile();
        file = new File(file.toString() + ".z");
        String com = compress(str);
        FileWriter fw;
        try {
            fw = new FileWriter(file);
            fw.write(com);
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(dsgui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            jTextArea3.append(e.toString());
            jTextArea3.setForeground(Color.red);
        }
        jTextArea3.append("file compressed to " + file.getName() + " successfully\nold file size: " + str.length() + " bytes\ncompressed size: " + com.length() + " bytes \n");
        jTextArea3.setForeground(Color.green);
    }//GEN-LAST:event_COMPRESSActionPerformed

    private void CORRECTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CORRECTActionPerformed
        jTextArea3.setText(null);
        try {
            XMLChecker x = new XMLChecker(jTextArea1.getText());
            String[] v = null;
            x.Check();
            x.correct();
            int i = x.getErrorCount();
            v = x.getErrors();
            jTextArea3.append("number of errors  = " + i + "\n");
            for (int j = 0; j < i; j++) {

                jTextArea3.append(v[j] + "\n");
            }
            jTextArea1.setText(null);
            jTextArea1.append(x.getCorrectXML());
            jTextArea3.append("XML corrected\n");
            jTextArea3.setForeground(Color.green);
        } catch (Exception e) {
            jTextArea3.append(e.toString());
            jTextArea3.setForeground(Color.red);
        }
    }//GEN-LAST:event_CORRECTActionPerformed

    private void EXPANDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXPANDActionPerformed
        jTextArea3.setText(null);
        JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(jPanel1);
        File file = fc.getSelectedFile();
        String[] name = file.getName().split("\\.");
        if (!name[name.length - 1].equals("z")) {
            jTextArea3.append("invalide extention");
            jTextArea3.setForeground(Color.red);;
            return;
        }
        String com;
        try {

            com = new String(Files.readAllBytes(file.toPath()));
            System.out.println(com);
            jTextArea1.setText(expand(com));
            jTextArea3.append("expanded " + file.getName() + " successfully\n");
            jTextArea3.setForeground(Color.green);
            EXPAND.setEnabled(false);
        } catch (IOException ex) {
            Logger.getLogger(dsgui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            jTextArea3.append(e.toString());
            jTextArea3.setForeground(Color.red);
        }

    }//GEN-LAST:event_EXPANDActionPerformed

    private void TOJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TOJSONActionPerformed
        jTextArea3.setText(null);
        String v = jTextArea1.getText();
        if (v == null || v.isBlank()) {
            jTextArea3.append("please insert text to convert\n");
            return;
        }
        v = Deformatter.deformate(v);
        XMLChecker x = new XMLChecker(v);
        String d = converter(x).toString();

        JFileChooser fc = new JFileChooser();
        fc.showSaveDialog(jPanel1);
        File file = fc.getSelectedFile();
        file = new File(file.toString() + ".json");
        FileWriter fw;
        try {
            fw = new FileWriter(file);
            fw.write(d);
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(dsgui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            jTextArea3.append(e.toString());
            jTextArea3.setForeground(Color.red);
        }
        jTextArea3.append("file converted to " + file.getName() + " successfully\n");
        jTextArea3.setForeground(Color.green);
    }//GEN-LAST:event_TOJSONActionPerformed

    private void CHECKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CHECKActionPerformed
        jTextArea3.setText(null);
        if (jTextArea1.getText().isBlank()) {
            jTextArea3.append("no text found!");
            jTextArea3.setForeground(Color.red);
            return;
        }
        XMLChecker x;
        try {
            x = new XMLChecker(jTextArea1.getText());
            x.Check();
            CORRECT.setEnabled(true);
            if (x.isCorrect() == true) {
                jTextArea3.append("XML is correct!\n");
                jTextArea3.setForeground(Color.green);
                TOJSON.setEnabled(true);
                FORMAT.setEnabled(true);
                CORRECT.setEnabled(true);
            } else if (x.isCorrect() == false) {
                jTextArea3.append("XML is not correct!\n");
                jTextArea3.setForeground(Color.red);
            }

        } catch (IllegalArgumentException e) {
            jTextArea3.append("XML is not correct\n");
            jTextArea3.setForeground(Color.red);
            return;
        } catch (Exception e) {
            jTextArea3.append(e.toString());
            jTextArea3.setForeground(Color.red);
        }
    }//GEN-LAST:event_CHECKActionPerformed

    private void MINIFYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MINIFYActionPerformed
        try {
            jTextArea3.setText(null);
            String c = jTextArea1.getText();
            if (c == null || c.isBlank()) {
                jTextArea3.append("please insert text to minify\n");
                jTextArea3.setForeground(Color.red);
                return;
            }
            c = Deformatter.deformate(c);
            jTextArea3.append("xml minified successfully\n");
            jTextArea1.setText(c);
            jTextArea3.setForeground(Color.green);
            // TODO add your handling code here:
        } catch (Exception e) {
            jTextArea3.append(e.toString());
            jTextArea3.setForeground(Color.red);
        }
    }//GEN-LAST:event_MINIFYActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        jTextArea1.setText(null);
        jTextArea3.setText(null);
        // TODO add your handling code here:
    }//GEN-LAST:event_clearActionPerformed

    private void AnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalysisActionPerformed
        try {
            XMLChecker generate = new XMLChecker(Deformatter.deformate(jTextArea1.getText()));
            generate.Check();
            generate.correct();
            XMLChecker generate2 = new XMLChecker(Deformatter.deformate(generate.getCorrectXML()));
            classesGenerator v = new classesGenerator();
            ArrayList user1 = v.generate(generate2);
            user = (User[]) user1.toArray(new User[user1.size()]);
            boolean generframe = generate2.isCorrect();

     while (generframe) {
              generframe = false;
              part2 i=new part2(user);
              i.show();
           }
        } catch (Exception e) {
            jTextArea3.append(e.toString());
            jTextArea3.setForeground(Color.red);
        }
    }//GEN-LAST:event_AnalysisActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dsgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dsgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dsgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dsgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dsgui().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Analysis;
    private javax.swing.JButton CHECK;
    private javax.swing.JButton COMPRESS;
    private javax.swing.JButton CORRECT;
    private javax.swing.JButton EXPAND;
    private javax.swing.JButton FORMAT;
    private javax.swing.JButton MINIFY;
    private javax.swing.JButton OPEN;
    private javax.swing.JButton TOJSON;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clear;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JFrame jFrame3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextPane jTextPane1;
    private java.awt.Scrollbar scrollbar1;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JButton search;
    private javax.swing.JButton GetMutul;
    private javax.swing.JButton GetAnalysis;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JButton Visuallizer;

    private void openfileActionperformed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet.");
// Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody

    }

}
