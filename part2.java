
import Phase1.Post;
import Phase1.User;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import phase2.NetworkAnalysis;
import phase2.PostSearch;
import phase2.Vizualizer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author SHEREF ZEDAN
 * 
 * @fix&Edits Ghaith Bassam Zaza
 */
public class part2 extends javax.swing.JFrame {

    private final User[] users;
    private final Vizualizer viz;
    private final NetworkAnalysis analysis;

    /**
     * Creates new form part2
     *
     * @param users
     */
    private class comboItem {

        private User user = null;
        private String title = null;

        public comboItem(User user) {
            this.user = user;

        }

        public comboItem(String title) {
            this.title = title;

        }

        @Override
        public String toString() {
            if (user == null) {
                return title;
            }
            return user.getName();
        }

        public User getValue() {

            return user;
        }
    }

    public part2(User[] users) {
        initComponents();
        this.users = users;
        this.viz = new Vizualizer(users);
        this.analysis = new NetworkAnalysis(users);

        Vector comboBoxItems = new Vector();
        comboBoxItems.add(new comboItem("User 2 to get mutuals"));
        for (User user : users) {
            comboBoxItems.add(new comboItem(user));
        }
        final DefaultComboBoxModel model = new DefaultComboBoxModel(comboBoxItems);
        mutual2.setModel(model);
        fillCombo(mutual1, "User 1 to get mutuals", users);
        fillCombo(mutual2, "User 2 to get mutuals", users);
        fillCombo(suggestionUser, "User to get suggestions", users);
    }

    final void fillCombo(JComboBox cb, String title, User[] users) {
        Vector comboBoxItems = new Vector();
        comboBoxItems.add(new comboItem(title));
        for (User user : users) {
            comboBoxItems.add(new comboItem(user));
        }
        final DefaultComboBoxModel model = new DefaultComboBoxModel(comboBoxItems);
        cb.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        Search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        Vizualizer = new javax.swing.JButton();
        GetMutul = new javax.swing.JButton();
        Analysis = new javax.swing.JButton();
        sugButton = new javax.swing.JButton();
        mutual2 = new javax.swing.JComboBox<>();
        mutual1 = new javax.swing.JComboBox<>();
        suggestionUser = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("analysis");
        setResizable(false);

        Search.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Search.setForeground(new java.awt.Color(51, 51, 255));
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        searchText.setColumns(30);
        searchText.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        searchText.setRows(1);
        jScrollPane1.setViewportView(searchText);

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        Vizualizer.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Vizualizer.setForeground(new java.awt.Color(51, 51, 255));
        Vizualizer.setText("Vizualizer");
        Vizualizer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VizualizerActionPerformed(evt);
            }
        });

        GetMutul.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        GetMutul.setForeground(new java.awt.Color(51, 51, 255));
        GetMutul.setText("Get mutuals");
        GetMutul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetMutulActionPerformed(evt);
            }
        });

        Analysis.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Analysis.setForeground(new java.awt.Color(51, 51, 255));
        Analysis.setText("Analysis");
        Analysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalysisActionPerformed(evt);
            }
        });

        sugButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sugButton.setForeground(new java.awt.Color(51, 51, 255));
        sugButton.setText("Get suggestions");
        sugButton.setSelected(true);
        sugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sugButtonActionPerformed(evt);
            }
        });

        mutual2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        mutual2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        mutual1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        mutual1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        suggestionUser.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        suggestionUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mutual1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mutual2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GetMutul, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Analysis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Vizualizer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(suggestionUser, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sugButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GetMutul, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mutual2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mutual1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suggestionUser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sugButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Analysis, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Vizualizer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {                                       

        output.setText(null);
        String f = searchText.getText();
        if (f == null || f.isBlank()) {
            output.append("please insert text to search!\n");
            output.setForeground(Color.red);
            return;
        }
        PostSearch x = new PostSearch();
        x.searchForPost(users, f);
        ArrayList<Post> p = x.getPosts();
        if (p.isEmpty()) {
            output.append("no result found!\n");
            output.setForeground(Color.red);

        } else {
            for (int i = 0; i < p.size(); i++) {
                output.append(p.get(i).toString() + "\n--------------------------------------\n");
            }
            output.setForeground(Color.BLACK);
        }

    }                                      

    private void VizualizerActionPerformed(java.awt.event.ActionEvent evt) {                                           
        viz.show();
    }                                          

    private void GetMutulActionPerformed(java.awt.event.ActionEvent evt) {                                         

        output.setText(null);
        /*   String r = mutual1.getText();
        String s = mutual2.getText();
        if ((r == null || r.isBlank()) || (s == null || s.isBlank())) {
            output.append("please insert text to mutual\n");
            output.setForeground(Color.red);
            return;
        }
        User user1 = null;
        User user2 = null;
        for (User user : users) {
            if (user.getName().equals(r)) {
                user1 = user;
            }
            if (user.getName().equals(s)) {
                user2 = user;
            }
            if(user1!=null&&user2!=null){
                break;
            }
        }*/
        User user1 = ((comboItem) mutual1.getSelectedItem()).getValue();
        User user2 = ((comboItem) mutual2.getSelectedItem()).getValue();
        if (user1 == null || user2 == null) {
            output.append("please insert text to mutual\n");
            output.setForeground(Color.red);
            return;
        }
        User[] mutuals = analysis.getMutual(user1, user2);
        if (mutuals == null || mutuals.length == 0) {
            output.append("no mutual follower found!");
            output.setForeground(Color.red);
            return;
        }
        output.append("Mutual follower:");
        for (User user : mutuals) {
            output.append("\nName: " + user.getName() + ", ID: " + user.getID());
        }
        output.setForeground(Color.black);


    }                                        

    private void AnalysisActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try{
        output.setText(null);

        User[] TA = analysis.getTopActive();
        User[] TI = analysis.getTopinfluencer();
        output.append("Top Influencer: ");
        for(User user:TI){
            output.append("\nName: " + user.getName() + ", ID: " + user.getID());
        }
        output.append("\nTop Active: ");
        for(User user:TA){
            output.append("\nName: " + user.getName() + ", ID: " + user.getID());
        }
        output.setForeground(Color.black);
        }catch(NullPointerException e){
            output.append("unable to do analysis!");
            output.setForeground(Color.red);
        }
    }                                        

    private void sugButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          

        output.setText(null);

        /*String r = sugestionsUser.getText();
        if (r == null || r.isBlank()) {
            output.append("please insert text to look for suggestions!\n");
            output.setForeground(Color.red);
            return;
        }
        User user1 = null;
        for (User user : users) {
            if (user.getName().equals(r)) {
                user1 = user;
                break;
            }
        }*/
        User user1 = ((comboItem) suggestionUser.getSelectedItem()).getValue();
        if (user1 == null) {
            output.append("please insert text to look for suggestions!\n");
            output.setForeground(Color.red);
            return;
        }
        User[] sug = analysis.getSuggerstions(user1);
        if (sug == null || sug.length == 0) {
            output.append("no suggestions found!");
            output.setForeground(Color.red);
            return;
        }
        output.append("Suggestions:");
        for (User user : sug) {
            output.append("\nName: " + user.getName() + ", ID: " + user.getID());
        }
        output.setForeground(Color.black);

        // TODO add your handling code here:
    }                                         

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify                     
    private javax.swing.JButton Analysis;
    private javax.swing.JButton GetMutul;
    private javax.swing.JButton Search;
    private javax.swing.JButton Vizualizer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> mutual1;
    private javax.swing.JComboBox<String> mutual2;
    private javax.swing.JTextArea output;
    private javax.swing.JTextArea searchText;
    private javax.swing.JButton sugButton;
    private javax.swing.JComboBox<String> suggestionUser;
    // End of variables declaration                   
}
